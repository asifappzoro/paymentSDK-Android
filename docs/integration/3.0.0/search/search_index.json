{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mobile paymentSDK Integration Guide for Android Introduction Mobile paymentSDK is divided into a core module and several secondary modules, one for each payment method. With this modular approach, you can pick and choose what you need: a few payment methods (or even just one) or the full selection. You can also exclude features of an individual module (e.g. IBAN scanner). Below, we will briefly go through the basic requirements/dependencies, but also code examples for client initialization and processing the payment response on your end. System Requirements The minimal requirement is Android API level 16 (4.1 Jelly Bean), but 20 (4.4.4 KitKat) is recommended for additional security (TLS). Device Requirements The IBAN and card number scanning features require a camera with autofocus. If you don't need these features, there are no further requirements. Basic Setup Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } Proguard Rules Each module has a defined set of Proguard rules. They load automatically once you've enabled code obfuscation in your app. This means you can see logs and debug the application until you enable the obfuscation. You do not need to define any further rules. Client Initialization When creating a payment object, don't forget to initialize the client first: Kotlin 1 2 3 4 5 val client = Client ( context , https://api-test.wirecard.com , requestTimeout ) //or val client = Client ( context , https://api-test.wirecard.com ) // default timeout is set to 30 seconds Java 1 2 3 4 5 Client client = new Client ( context , https://api-test.wirecard.com , requestTimeout ); //or Client client = new Client ( context , https://api-test.wirecard.com ); // default timeout is set to 30 seconds For a successful initialization, Client requires Context , Wirecard payment gateway URL address and Timeout (in seconds). Check the SDK javadoc for details about the constructor and other parameters. Processing the response This is example code for processing the response (to see the result of the transaction), after the payment goes through: Kotlin 1 2 3 4 5 6 7 8 9 override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ?) { super . onActivityResult ( requestCode , resultCode , data ) val paymentSdkResponse = data ?. getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ) if ( paymentSdkResponse is PaymentResponse ) { Toast . makeText ( this , Response code: ${paymentSdkResponse.responseCode} ${paymentSdkResponse.errorMessage} ${paymentSdkResponse.payment?.statuses?.print()} , Toast . LENGTH_SHORT ). show () Log . i ( response , ${paymentSdkResponse.payment.toString()} ${paymentSdkResponse.throwable?.cause} ) } } Java 1 2 3 4 5 6 7 8 @Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); Serializable paymentSdkResponse = data . getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ); if ( paymentSdkResponse instanceof PaymentResponse ) { String formattedResponse = ResponseHelper . getFormattedResponse ( paymentSdkResponse ); Toast . makeText ( this , formattedResponse , Toast . LENGTH_SHORT ). show (); } } PaymentResponse Object Reference This is the PaymentResponse object model: responseCode : Int - Returns a response code (documented below) payment : Payment - Actual payment response (returned only on success) errorMessage : String - Error message throwable : Throwable - Returned for exceptions Response codes This is a list of available response codes and their meaning: RESULT_OK - Returned after a successful payment ERROR_CODE_GENERAL - An exception or another unspecified error ( Throwable is part of the ResponseWrapper ) ERROR_CODE_INVALID_PAYMENT_DATA - Provided payment data are invalid ERROR_CODE_USER_CANCELED - User has canceled the payment ERROR_CODE_ROOTED_DEVICE - Client check for rooted device ERROR_CODE_NETWORK_ISSUE - No internet connection, certificate issue or other network related issue ERROR_CODE_TRANSACTION_TIMEOUT - Payment session has timed out ERROR_CODE_TRANSACTION_RETRY - User has retried a payment (ZAPP payment method only) Error Handling The SDK uses default exceptions only. If you decide to use Kotlin, the SDK provides a null check within the IDE (if a field is null, IllegalArgumentException is thrown). We recommend using a try-catch block for SDK initialization and starting a payment using the startPayment() method: both actions throw a RuntimeException .","title":"Start Here"},{"location":"#mobile-paymentsdk-integration-guide-for-android","text":"","title":"Mobile paymentSDK Integration Guide for Android"},{"location":"#introduction","text":"Mobile paymentSDK is divided into a core module and several secondary modules, one for each payment method. With this modular approach, you can pick and choose what you need: a few payment methods (or even just one) or the full selection. You can also exclude features of an individual module (e.g. IBAN scanner). Below, we will briefly go through the basic requirements/dependencies, but also code examples for client initialization and processing the payment response on your end.","title":"Introduction"},{"location":"#system-requirements","text":"The minimal requirement is Android API level 16 (4.1 Jelly Bean), but 20 (4.4.4 KitKat) is recommended for additional security (TLS).","title":"System Requirements"},{"location":"#device-requirements","text":"The IBAN and card number scanning features require a camera with autofocus. If you don't need these features, there are no further requirements.","title":"Device Requirements"},{"location":"#basic-setup","text":"Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } }","title":"Basic Setup"},{"location":"#proguard-rules","text":"Each module has a defined set of Proguard rules. They load automatically once you've enabled code obfuscation in your app. This means you can see logs and debug the application until you enable the obfuscation. You do not need to define any further rules.","title":"Proguard Rules"},{"location":"#client-initialization","text":"When creating a payment object, don't forget to initialize the client first: Kotlin 1 2 3 4 5 val client = Client ( context , https://api-test.wirecard.com , requestTimeout ) //or val client = Client ( context , https://api-test.wirecard.com ) // default timeout is set to 30 seconds Java 1 2 3 4 5 Client client = new Client ( context , https://api-test.wirecard.com , requestTimeout ); //or Client client = new Client ( context , https://api-test.wirecard.com ); // default timeout is set to 30 seconds For a successful initialization, Client requires Context , Wirecard payment gateway URL address and Timeout (in seconds). Check the SDK javadoc for details about the constructor and other parameters.","title":"Client Initialization"},{"location":"#processing-the-response","text":"This is example code for processing the response (to see the result of the transaction), after the payment goes through: Kotlin 1 2 3 4 5 6 7 8 9 override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ?) { super . onActivityResult ( requestCode , resultCode , data ) val paymentSdkResponse = data ?. getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ) if ( paymentSdkResponse is PaymentResponse ) { Toast . makeText ( this , Response code: ${paymentSdkResponse.responseCode} ${paymentSdkResponse.errorMessage} ${paymentSdkResponse.payment?.statuses?.print()} , Toast . LENGTH_SHORT ). show () Log . i ( response , ${paymentSdkResponse.payment.toString()} ${paymentSdkResponse.throwable?.cause} ) } } Java 1 2 3 4 5 6 7 8 @Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); Serializable paymentSdkResponse = data . getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ); if ( paymentSdkResponse instanceof PaymentResponse ) { String formattedResponse = ResponseHelper . getFormattedResponse ( paymentSdkResponse ); Toast . makeText ( this , formattedResponse , Toast . LENGTH_SHORT ). show (); } }","title":"Processing the response"},{"location":"#paymentresponse-object-reference","text":"This is the PaymentResponse object model: responseCode : Int - Returns a response code (documented below) payment : Payment - Actual payment response (returned only on success) errorMessage : String - Error message throwable : Throwable - Returned for exceptions","title":"PaymentResponse Object Reference"},{"location":"#response-codes","text":"This is a list of available response codes and their meaning: RESULT_OK - Returned after a successful payment ERROR_CODE_GENERAL - An exception or another unspecified error ( Throwable is part of the ResponseWrapper ) ERROR_CODE_INVALID_PAYMENT_DATA - Provided payment data are invalid ERROR_CODE_USER_CANCELED - User has canceled the payment ERROR_CODE_ROOTED_DEVICE - Client check for rooted device ERROR_CODE_NETWORK_ISSUE - No internet connection, certificate issue or other network related issue ERROR_CODE_TRANSACTION_TIMEOUT - Payment session has timed out ERROR_CODE_TRANSACTION_RETRY - User has retried a payment (ZAPP payment method only)","title":"Response codes"},{"location":"#error-handling","text":"The SDK uses default exceptions only. If you decide to use Kotlin, the SDK provides a null check within the IDE (if a field is null, IllegalArgumentException is thrown). We recommend using a try-catch block for SDK initialization and starting a payment using the startPayment() method: both actions throw a RuntimeException .","title":"Error Handling"},{"location":"Card_Payments/","text":"Card Payments Supported Transaction Types This payment method supports the following transaction types: purchase - charges the account holder's card and immediately transfers the reserved amount. authorization-only - verifies the validity of account holder's card, but does not leave an authorized amount. authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. referenced-purchase - charges the account holder's card and immediately transfers the reserved amount. References a previous purchase transaction. referenced-authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. References a previous authorization transaction. capture-authorization - captures a previously authorized amount from the account holder's card. Must refer to an existing authorization transaction. tokenize - provides a unique token which represents the tokenized card data. This token then can be used in future transactions. Module Dependency Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation ( com.wirecard.ecom:card:$wirecardEcomLibraryVersion ) { // uncomment exclude module in case you would like to disable card scanning feature // exclude module: play-services-vision } ... } To disable the card scanner feature, uncomment the exclude module line. When adding/removing this feature, perform a full clean build. If you intend to use Card Payments module together with the SEPA Direct Debit module (with enabled IBAN scanner), you must enable it in both modules. Basic Card Payment This is a code example for a basic card payment: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 val cardPayment = CardPayment ( signature , requestID , merchantID , transactionType , amount , currency ) // for enabling animated card layout cardPayment . animatedCardPayment = true // force 3D Secure attempt cardPayment . attempt3d = true Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cardPayment = new CardPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . build (); // for enabling animated card layout cardPayment . setAnimatedCardPayment ( true ); // force 3D Secure attempt cardPayment . setAttempt3d ( true ); new Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ); Note: You can set additional parameters after the payment object is created. Check the API documentation for more details. Token payment This is a code example for a card payment which uses a card token (obtained from a previous transaction): Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 val cardPayment = CardPayment ( signature , requestID , merchantID , transactionType , amount , currency ) // for enabling animated card layout cardPayment . animatedCardPayment = true val cardToken = CardToken () cardToken . tokenId = 12345678901111 cardPayment . cardToken = cardToken cardToken . tokenUsageIndicator = true cardToken . requireSecurityCode = true Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cardPayment = new CardPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . build (); // for enabling animated card layout cardPayment . setAnimatedCardPayment ( true ); CardToken cardToken = new CardToken (); cardToken . setTokenId ( 12345678901111 ); cardPayment . setCardToken ( cardToken ); cardPayment . setRequireSecurityCode ( true ); cardPayment . setTokenUsageIndicator ( true ); new Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ); Card Field Card Field is a feature where card information (card number, expiration date and CVV) is entered into a single, dynamically changing field instead of multiple separate ones. Here's example code for a card payment using this feature: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class KotlinCardFormActivity : AppCompatActivity (), Observer PaymentResponse { private val mContext = this private val mPaymentObjectProvider = PaymentObjectProvider () private lateinit var cardFieldFragment : CardFieldFragment override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_card_form ) cardFieldFragment = CardFieldFragment . Builder (). build () supportFragmentManager . beginTransaction () . add ( R . id . card_field_container , cardFieldFragment ) . commit () cardFieldFragment . getEventObserver () . subscribe { state - Log . i ( event , state . toString ()) } } fun onSubmitButtonClicked ( view : View ) { if ( cardFieldFragment . getCardBundle () != null ) { Client ( this , URL_EE_TEST , null , REQUEST_TIMEOUT ). startPayment ( getCardFormPayment ( cardFieldFragment . getCardBundle ())) findViewById View ( R . id . progress ). visibility = View . VISIBLE } else { Toast . makeText ( mContext , Card bundle is null! , Toast . LENGTH_SHORT ). show () } } fun getCardFormPayment ( cardBundle : CardBundle ): CardFormPayment { val merchantID = merchant_id val secretKey = secret_key val requestID = UUID . randomUUID (). toString () val transactionType = TransactionType . PURCHASE val amount = BigDecimal ( 5 ) val currency = EUR val signature = SignatureHelper . generateSignature ( timestamp , merchantID , requestID , transactionType . value , amount , currency , secretKey ) val cardFormPayment = CardFormPayment . Builder () . setSignature ( signature ) . setMerchantAccountId ( merchantID ) . setRequestId ( requestID ) . setAmount ( amount ) . setTransactionType ( transactionType ) . setCurrency ( currency ) . setCardBundle ( cardBundle ) . build () val accountHolder = AccountHolder ( John , Doe ) cardFormPayment . accountHolder = accountHolder return cardFormPayment } override fun onObserve ( paymentResponse : PaymentResponse ) { runOnUiThread { Toast . makeText ( mContext , ResponseHelper . getFormattedResponse ( paymentResponse ), Toast . LENGTH_SHORT ). show () findViewById View ( R . id . progress ). visibility = View . GONE } } } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 public class CardFormActivity extends AppCompatActivity implements Observer PaymentResponse { private Context mContext = this ; private PaymentObjectProvider mPaymentObjectProvider = new PaymentObjectProvider (); CardFieldFragment cardFieldFragment ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_card_form ); cardFieldFragment = new CardFieldFragment . Builder (). build (); getSupportFragmentManager () . beginTransaction () . add ( R . id . card_field_container , cardFieldFragment ) . commit (); cardFieldFragment . getEventObserver () . subscribe ( state - { Log . i ( event , state . toString ()); } ); } public void onSubmitButtonClicked ( View view ) { if ( cardFieldFragment . getCardBundle () != null ) { new Client ( this , URL_EE_TEST , null , REQUEST_TIMEOUT ). startPayment ( getCardFormPayment ( cardFieldFragment . getCardBundle ())); findViewById ( R . id . progress ). setVisibility ( View . VISIBLE ); } else { Toast . makeText ( mContext , Card bundle is null! , Toast . LENGTH_SHORT ). show (); } } public CardFormPayment getCardFormPayment ( CardBundle cardBundle ) { String merchantID = merchant_id ; String secretKey = secret_key ; String requestID = UUID . randomUUID (). toString (); TransactionType transactionType = TransactionType . PURCHASE ; BigDecimal amount = new BigDecimal ( 5 ); String currency = EUR ; String signature = SignatureHelper . generateSignature ( timestamp , merchantID , requestID , transactionType . getValue (), amount , currency , secretKey ); CardFormPayment cardFormPayment = new CardFormPayment . Builder () . setSignature ( signature ) . setMerchantAccountId ( merchantID ) . setRequestId ( requestID ) . setAmount ( amount ) . setTransactionType ( transactionType ) . setCurrency ( currency ) . setCardBundle ( cardBundle ) . build (); AccountHolder accountHolder = new AccountHolder ( John , Doe ); cardFormPayment . setAccountHolder ( accountHolder ); return cardFormPayment ; } @Override public void onObserve ( PaymentResponse paymentResponse ) { runOnUiThread (() - { Toast . makeText ( mContext , ResponseHelper . getFormattedResponse ( paymentResponse ), Toast . LENGTH_SHORT ). show (); findViewById ( R . id . progress ). setVisibility ( View . GONE ); } ); } } Additional Options for Card Field You can set additional options for Card Field through CardFieldFragment.Builder : SetSupportedCardBrands - sets allowed card brands (providers) setExpirationDate - used in token payments setRequestFocus - sets screen focus (after the card form loads) setHideCardIcon - hides provider icons (VISA, Maestro, etc.) setToken - used in token payments setMaskedCardNumber - used in token payments setCardBrand - sets the card brand/provider setTextSize - changes text size setLocale - changes the payment locale setNativeLocale - changes the payment locale (UI only) Token Payment with Card Field The payment object is identical to a normal card field payment (like the example above), but you need to include the card token. Kotlin 1 2 3 4 5 6 7 ... val cardToken = CardToken () cardToken . tokenId = 12345678901111 cardPayment . cardToken = cardToken cardToken . tokenUsageIndicator = true cardToken . requireSecurityCode = true ... Java 1 2 3 4 5 6 7 8 ... CardToken cardToken = new CardToken (); cardToken . setTokenId ( 12345678901111 ); cardPayment . setCardToken ( cardToken ); cardPayment . setRequireSecurityCode ( true ); cardPayment . setTokenUsageIndicator ( true ); ... Customizing Visuals To change colors within the SDK, override the default color values in the .xml file. Color Resources Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line Changing Fonts To change fonts, add the font path to the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 Changing Text Size To change the text size for cardField fragments use the dimension attribute wd_ecom_cardfield_text_size . To change text size in any other modules use the dimension attribute wd_ecom_text_size . Customizing Simple Card Payments Color resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_main_alpha80 4 - wd_ecom_color_pay_button_text 5 - wd_ecom_color_toolbar_text 6 - wd_ecom_color_error 7 - wd_ecom_color_main_background Icons 8 - wd_ecom_arrow_back 9 - wd_ecom_cardholder_name 10 - wd_ecom_camera_blue 11 - wd_ecom_date 12 - wd_ecom_lock Customizing Animated Card Payments Color resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_toolbar_text 4 - wd_ecom_color_pay_button_text 5 - wd_ecom_color_main_alpha80 6 - wd_ecom_color_main_alpha40 7 - wd_ecom_color_error 8 - wd_ecom_color_main_background Icons 9 - wd_ecom_arrow_back 10 - wd_ecom_chip Customizing cardField Fragments Color resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_error","title":"Card Payments"},{"location":"Card_Payments/#card-payments","text":"","title":"Card Payments"},{"location":"Card_Payments/#supported-transaction-types","text":"This payment method supports the following transaction types: purchase - charges the account holder's card and immediately transfers the reserved amount. authorization-only - verifies the validity of account holder's card, but does not leave an authorized amount. authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. referenced-purchase - charges the account holder's card and immediately transfers the reserved amount. References a previous purchase transaction. referenced-authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. References a previous authorization transaction. capture-authorization - captures a previously authorized amount from the account holder's card. Must refer to an existing authorization transaction. tokenize - provides a unique token which represents the tokenized card data. This token then can be used in future transactions.","title":"Supported Transaction Types"},{"location":"Card_Payments/#module-dependency","text":"Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation ( com.wirecard.ecom:card:$wirecardEcomLibraryVersion ) { // uncomment exclude module in case you would like to disable card scanning feature // exclude module: play-services-vision } ... } To disable the card scanner feature, uncomment the exclude module line. When adding/removing this feature, perform a full clean build. If you intend to use Card Payments module together with the SEPA Direct Debit module (with enabled IBAN scanner), you must enable it in both modules.","title":"Module Dependency"},{"location":"Card_Payments/#basic-card-payment","text":"This is a code example for a basic card payment: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 val cardPayment = CardPayment ( signature , requestID , merchantID , transactionType , amount , currency ) // for enabling animated card layout cardPayment . animatedCardPayment = true // force 3D Secure attempt cardPayment . attempt3d = true Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cardPayment = new CardPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . build (); // for enabling animated card layout cardPayment . setAnimatedCardPayment ( true ); // force 3D Secure attempt cardPayment . setAttempt3d ( true ); new Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ); Note: You can set additional parameters after the payment object is created. Check the API documentation for more details.","title":"Basic Card Payment"},{"location":"Card_Payments/#token-payment","text":"This is a code example for a card payment which uses a card token (obtained from a previous transaction): Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 val cardPayment = CardPayment ( signature , requestID , merchantID , transactionType , amount , currency ) // for enabling animated card layout cardPayment . animatedCardPayment = true val cardToken = CardToken () cardToken . tokenId = 12345678901111 cardPayment . cardToken = cardToken cardToken . tokenUsageIndicator = true cardToken . requireSecurityCode = true Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cardPayment = new CardPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . build (); // for enabling animated card layout cardPayment . setAnimatedCardPayment ( true ); CardToken cardToken = new CardToken (); cardToken . setTokenId ( 12345678901111 ); cardPayment . setCardToken ( cardToken ); cardPayment . setRequireSecurityCode ( true ); cardPayment . setTokenUsageIndicator ( true ); new Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment );","title":"Token payment"},{"location":"Card_Payments/#card-field","text":"Card Field is a feature where card information (card number, expiration date and CVV) is entered into a single, dynamically changing field instead of multiple separate ones. Here's example code for a card payment using this feature: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class KotlinCardFormActivity : AppCompatActivity (), Observer PaymentResponse { private val mContext = this private val mPaymentObjectProvider = PaymentObjectProvider () private lateinit var cardFieldFragment : CardFieldFragment override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_card_form ) cardFieldFragment = CardFieldFragment . Builder (). build () supportFragmentManager . beginTransaction () . add ( R . id . card_field_container , cardFieldFragment ) . commit () cardFieldFragment . getEventObserver () . subscribe { state - Log . i ( event , state . toString ()) } } fun onSubmitButtonClicked ( view : View ) { if ( cardFieldFragment . getCardBundle () != null ) { Client ( this , URL_EE_TEST , null , REQUEST_TIMEOUT ). startPayment ( getCardFormPayment ( cardFieldFragment . getCardBundle ())) findViewById View ( R . id . progress ). visibility = View . VISIBLE } else { Toast . makeText ( mContext , Card bundle is null! , Toast . LENGTH_SHORT ). show () } } fun getCardFormPayment ( cardBundle : CardBundle ): CardFormPayment { val merchantID = merchant_id val secretKey = secret_key val requestID = UUID . randomUUID (). toString () val transactionType = TransactionType . PURCHASE val amount = BigDecimal ( 5 ) val currency = EUR val signature = SignatureHelper . generateSignature ( timestamp , merchantID , requestID , transactionType . value , amount , currency , secretKey ) val cardFormPayment = CardFormPayment . Builder () . setSignature ( signature ) . setMerchantAccountId ( merchantID ) . setRequestId ( requestID ) . setAmount ( amount ) . setTransactionType ( transactionType ) . setCurrency ( currency ) . setCardBundle ( cardBundle ) . build () val accountHolder = AccountHolder ( John , Doe ) cardFormPayment . accountHolder = accountHolder return cardFormPayment } override fun onObserve ( paymentResponse : PaymentResponse ) { runOnUiThread { Toast . makeText ( mContext , ResponseHelper . getFormattedResponse ( paymentResponse ), Toast . LENGTH_SHORT ). show () findViewById View ( R . id . progress ). visibility = View . GONE } } } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 public class CardFormActivity extends AppCompatActivity implements Observer PaymentResponse { private Context mContext = this ; private PaymentObjectProvider mPaymentObjectProvider = new PaymentObjectProvider (); CardFieldFragment cardFieldFragment ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_card_form ); cardFieldFragment = new CardFieldFragment . Builder (). build (); getSupportFragmentManager () . beginTransaction () . add ( R . id . card_field_container , cardFieldFragment ) . commit (); cardFieldFragment . getEventObserver () . subscribe ( state - { Log . i ( event , state . toString ()); } ); } public void onSubmitButtonClicked ( View view ) { if ( cardFieldFragment . getCardBundle () != null ) { new Client ( this , URL_EE_TEST , null , REQUEST_TIMEOUT ). startPayment ( getCardFormPayment ( cardFieldFragment . getCardBundle ())); findViewById ( R . id . progress ). setVisibility ( View . VISIBLE ); } else { Toast . makeText ( mContext , Card bundle is null! , Toast . LENGTH_SHORT ). show (); } } public CardFormPayment getCardFormPayment ( CardBundle cardBundle ) { String merchantID = merchant_id ; String secretKey = secret_key ; String requestID = UUID . randomUUID (). toString (); TransactionType transactionType = TransactionType . PURCHASE ; BigDecimal amount = new BigDecimal ( 5 ); String currency = EUR ; String signature = SignatureHelper . generateSignature ( timestamp , merchantID , requestID , transactionType . getValue (), amount , currency , secretKey ); CardFormPayment cardFormPayment = new CardFormPayment . Builder () . setSignature ( signature ) . setMerchantAccountId ( merchantID ) . setRequestId ( requestID ) . setAmount ( amount ) . setTransactionType ( transactionType ) . setCurrency ( currency ) . setCardBundle ( cardBundle ) . build (); AccountHolder accountHolder = new AccountHolder ( John , Doe ); cardFormPayment . setAccountHolder ( accountHolder ); return cardFormPayment ; } @Override public void onObserve ( PaymentResponse paymentResponse ) { runOnUiThread (() - { Toast . makeText ( mContext , ResponseHelper . getFormattedResponse ( paymentResponse ), Toast . LENGTH_SHORT ). show (); findViewById ( R . id . progress ). setVisibility ( View . GONE ); } ); } }","title":"Card Field"},{"location":"Card_Payments/#additional-options-for-card-field","text":"You can set additional options for Card Field through CardFieldFragment.Builder : SetSupportedCardBrands - sets allowed card brands (providers) setExpirationDate - used in token payments setRequestFocus - sets screen focus (after the card form loads) setHideCardIcon - hides provider icons (VISA, Maestro, etc.) setToken - used in token payments setMaskedCardNumber - used in token payments setCardBrand - sets the card brand/provider setTextSize - changes text size setLocale - changes the payment locale setNativeLocale - changes the payment locale (UI only)","title":"Additional Options for Card Field"},{"location":"Card_Payments/#token-payment-with-card-field","text":"The payment object is identical to a normal card field payment (like the example above), but you need to include the card token. Kotlin 1 2 3 4 5 6 7 ... val cardToken = CardToken () cardToken . tokenId = 12345678901111 cardPayment . cardToken = cardToken cardToken . tokenUsageIndicator = true cardToken . requireSecurityCode = true ... Java 1 2 3 4 5 6 7 8 ... CardToken cardToken = new CardToken (); cardToken . setTokenId ( 12345678901111 ); cardPayment . setCardToken ( cardToken ); cardPayment . setRequireSecurityCode ( true ); cardPayment . setTokenUsageIndicator ( true ); ...","title":"Token Payment with Card Field"},{"location":"Card_Payments/#customizing-visuals","text":"To change colors within the SDK, override the default color values in the .xml file.","title":"Customizing Visuals"},{"location":"Card_Payments/#color-resources","text":"Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line","title":"Color Resources"},{"location":"Card_Payments/#changing-fonts","text":"To change fonts, add the font path to the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1","title":"Changing Fonts"},{"location":"Card_Payments/#changing-text-size","text":"To change the text size for cardField fragments use the dimension attribute wd_ecom_cardfield_text_size . To change text size in any other modules use the dimension attribute wd_ecom_text_size .","title":"Changing Text Size"},{"location":"Card_Payments/#customizing-simple-card-payments","text":"Color resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_main_alpha80 4 - wd_ecom_color_pay_button_text 5 - wd_ecom_color_toolbar_text 6 - wd_ecom_color_error 7 - wd_ecom_color_main_background Icons 8 - wd_ecom_arrow_back 9 - wd_ecom_cardholder_name 10 - wd_ecom_camera_blue 11 - wd_ecom_date 12 - wd_ecom_lock","title":"Customizing Simple Card Payments"},{"location":"Card_Payments/#customizing-animated-card-payments","text":"Color resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_toolbar_text 4 - wd_ecom_color_pay_button_text 5 - wd_ecom_color_main_alpha80 6 - wd_ecom_color_main_alpha40 7 - wd_ecom_color_error 8 - wd_ecom_color_main_background Icons 9 - wd_ecom_arrow_back 10 - wd_ecom_chip","title":"Customizing Animated Card Payments"},{"location":"Card_Payments/#customizing-cardfield-fragments","text":"Color resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_error","title":"Customizing cardField Fragments"},{"location":"Localization/","text":"Localization You can set two types of locale - locale and localeUIOnly - in 3 combinations: 1. locale is set - selected locale is sent to the backend and the UI is set to specified language, 2. localeUIOnly is set - locale is not sent to backend, but UI is set to specified language, 3. Both locale and localeUIOnly are set - the locale string is sent to backend and the UI is set according to localeUIOnly . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . locale = DE cardPayment . localeUIOnly = RU Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) This example shows the 3rd option (dual setting): the backend locale is set to DE and the frontend localeUIOnly to RU. This means that although the backend locale backend is DE, the UI language is RU. Override strings All strings are saved in the strings.xml file for all supported languages. In it you can find every possible language key. Important: Do not delete any special characters (e.g. {0}) to avoid errors.","title":"Localization"},{"location":"Localization/#localization","text":"You can set two types of locale - locale and localeUIOnly - in 3 combinations: 1. locale is set - selected locale is sent to the backend and the UI is set to specified language, 2. localeUIOnly is set - locale is not sent to backend, but UI is set to specified language, 3. Both locale and localeUIOnly are set - the locale string is sent to backend and the UI is set according to localeUIOnly . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . locale = DE cardPayment . localeUIOnly = RU Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) This example shows the 3rd option (dual setting): the backend locale is set to DE and the frontend localeUIOnly to RU. This means that although the backend locale backend is DE, the UI language is RU.","title":"Localization"},{"location":"Localization/#override-strings","text":"All strings are saved in the strings.xml file for all supported languages. In it you can find every possible language key. Important: Do not delete any special characters (e.g. {0}) to avoid errors.","title":"Override strings"},{"location":"PayPal/","text":"PayPal Supported Transaction Types This payment method supports the following transaction types: debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. authorization-only - verifies the validity of account holder's card, but does not leave an authorized amount. capture-authorization - captures a previously authorized amount from the account holder's card. Must refer to an existing authorization transaction. Module Dependency Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation com.wirecard.ecom:paypal:$wirecardEcomLibraryVersion ... } Basic PayPal Payment PayPal requires additional setup of the wd_ecom_paypal_scheme and wd_ecom_paypal_host resources so you can receive responses from PayPal: 1 2 3 4 5 6 resources ... string name= wd_ecom_paypal_scheme yourapp /string string name= wd_ecom_paypal_host result.paypal /string ... /resources Then you can go ahead and create the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 val paypalPayment = PayPalPayment ( signature = signature , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , periodic = null , riskReferenceId = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( paypalPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 PayPalPayment payPalPayment = new PayPalPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( paymentState . getAmount ()) . setCurrency ( currency ) . setPeriodic ( null ) . setRiskReferenceId ( null ) . build (); Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( paypalPayment ) Recurring PayPal Payment On a basic level, recurring payments have two phases: The initial request, which must include: periodic type set to RECURRING , sequence type set to FIRST . The \"recurring\"/follow-up requests, which must include: periodic type set to RECURRING , sequence type set to SEQUENCE , parentTransactionId and riskReferenceId values from the initial request. So in order to create a recurring payment, you need to: Send a initial request with the appropriate periodic and sequence flags, Save the values of parentTransactionId and riskReferenceId fields generated in this first payment, Reference these values in the follow-up request, then send it with appropriate periodic and sequence flags. Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // first payment val firstPeriodicType = Periodic () firstPeriodicType . periodicType = PeriodicType . RECURRING . value firstPeriodicType . sequenceType = SequenceType . FIRST . value val firstPaypalPayment = PayPalPayment ( signature = signature , requestTimeStamp = timestamp , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , periodic = firstPeriodicType , riskReferenceId = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( firstPaypalPayment ) ... // handle first result private var parentTransactionId : String ? = null private var riskReferenceId : String ? = null override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ?) { super . onActivityResult ( requestCode , resultCode , data ) val paymentSdkResponse = data ?. getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ) if ( paymentSdkResponse is PaymentResponse ) { parentTransactionId = paymentSdkResponse . payment ?. parentTransactionId riskReferenceId = paymentSdkResponse . payment ?. riskReferenceId } } // second payment using parentTransactionId and riskReferenceId val secondPeriodicType = Periodic () secondPeriodicType . periodicType = PeriodicType . RECURRING . value secondPeriodicType . sequenceType = SequenceType . SEQUENCE . value val secondPaypalPayment = PayPalPayment ( signature = signature , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , periodic = secondPeriodicType , riskReferenceId = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( secondPaypalPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // first payment Periodic firstPeriodicType = new Periodic (); firstPeriodicType . periodicType = PeriodicType . RECURRING . value ; firstPeriodicType . sequenceType = SequenceType . FIRST . value ; PayPalPayment firstPaypalPayment = PayPalPayment ( signature , requestID , merchantID , transactionType , amount , currency , firstPeriodicType , null ); new Client ( this , https://api-test.wirecard.com , requestTimeout ). startPayment ( firstPaypalPayment ); ... // handle first result private String parentTransactionId = null ; private String riskReferenceId = null ; protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); Serializable paymentSdkResponse = data . getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ); if ( paymentSdkResponse instanceof PaymentResponse ) { parentTransactionId = paymentSdkResponse . payment . getParentTransactionId (); riskReferenceId = paymentSdkResponse . payment . getRiskReferenceId (); } } // second payment using parentTransactionId and riskReferenceId; Periodic secondPeriodicType = new Periodic (); secondPeriodicType . periodicType = PeriodicType . RECURRING . value ; secondPeriodicType . sequenceType = SequenceType . SEQUENCE . value ; PayPalPayment secondPaypalPayment = PayPalPayment ( signature , requestID , merchantID , transactionType , amount , currency , secondPeriodicType , riskReferenceId ); new Client ( this , https://api-test.wirecard.com , requestTimeout ). startPayment ( secondPaypalPayment ); Customizing Visuals To change colors within the SDK, override the default color values in the .xml file. Color Resources Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line Changing Fonts To change fonts, add the font path to the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 Changing Text Size To change the text size use dimensional attribute wd_ecom_text_size . This affects all the modules, except cardField .","title":"PayPal"},{"location":"PayPal/#paypal","text":"","title":"PayPal"},{"location":"PayPal/#supported-transaction-types","text":"This payment method supports the following transaction types: debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. authorization-only - verifies the validity of account holder's card, but does not leave an authorized amount. capture-authorization - captures a previously authorized amount from the account holder's card. Must refer to an existing authorization transaction.","title":"Supported Transaction Types"},{"location":"PayPal/#module-dependency","text":"Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation com.wirecard.ecom:paypal:$wirecardEcomLibraryVersion ... }","title":"Module Dependency"},{"location":"PayPal/#basic-paypal-payment","text":"PayPal requires additional setup of the wd_ecom_paypal_scheme and wd_ecom_paypal_host resources so you can receive responses from PayPal: 1 2 3 4 5 6 resources ... string name= wd_ecom_paypal_scheme yourapp /string string name= wd_ecom_paypal_host result.paypal /string ... /resources Then you can go ahead and create the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 val paypalPayment = PayPalPayment ( signature = signature , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , periodic = null , riskReferenceId = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( paypalPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 PayPalPayment payPalPayment = new PayPalPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( paymentState . getAmount ()) . setCurrency ( currency ) . setPeriodic ( null ) . setRiskReferenceId ( null ) . build (); Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( paypalPayment )","title":"Basic PayPal Payment"},{"location":"PayPal/#recurring-paypal-payment","text":"On a basic level, recurring payments have two phases: The initial request, which must include: periodic type set to RECURRING , sequence type set to FIRST . The \"recurring\"/follow-up requests, which must include: periodic type set to RECURRING , sequence type set to SEQUENCE , parentTransactionId and riskReferenceId values from the initial request. So in order to create a recurring payment, you need to: Send a initial request with the appropriate periodic and sequence flags, Save the values of parentTransactionId and riskReferenceId fields generated in this first payment, Reference these values in the follow-up request, then send it with appropriate periodic and sequence flags. Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // first payment val firstPeriodicType = Periodic () firstPeriodicType . periodicType = PeriodicType . RECURRING . value firstPeriodicType . sequenceType = SequenceType . FIRST . value val firstPaypalPayment = PayPalPayment ( signature = signature , requestTimeStamp = timestamp , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , periodic = firstPeriodicType , riskReferenceId = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( firstPaypalPayment ) ... // handle first result private var parentTransactionId : String ? = null private var riskReferenceId : String ? = null override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ?) { super . onActivityResult ( requestCode , resultCode , data ) val paymentSdkResponse = data ?. getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ) if ( paymentSdkResponse is PaymentResponse ) { parentTransactionId = paymentSdkResponse . payment ?. parentTransactionId riskReferenceId = paymentSdkResponse . payment ?. riskReferenceId } } // second payment using parentTransactionId and riskReferenceId val secondPeriodicType = Periodic () secondPeriodicType . periodicType = PeriodicType . RECURRING . value secondPeriodicType . sequenceType = SequenceType . SEQUENCE . value val secondPaypalPayment = PayPalPayment ( signature = signature , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , periodic = secondPeriodicType , riskReferenceId = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( secondPaypalPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // first payment Periodic firstPeriodicType = new Periodic (); firstPeriodicType . periodicType = PeriodicType . RECURRING . value ; firstPeriodicType . sequenceType = SequenceType . FIRST . value ; PayPalPayment firstPaypalPayment = PayPalPayment ( signature , requestID , merchantID , transactionType , amount , currency , firstPeriodicType , null ); new Client ( this , https://api-test.wirecard.com , requestTimeout ). startPayment ( firstPaypalPayment ); ... // handle first result private String parentTransactionId = null ; private String riskReferenceId = null ; protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); Serializable paymentSdkResponse = data . getSerializableExtra ( Client . EXTRA_PAYMENT_SDK_RESPONSE ); if ( paymentSdkResponse instanceof PaymentResponse ) { parentTransactionId = paymentSdkResponse . payment . getParentTransactionId (); riskReferenceId = paymentSdkResponse . payment . getRiskReferenceId (); } } // second payment using parentTransactionId and riskReferenceId; Periodic secondPeriodicType = new Periodic (); secondPeriodicType . periodicType = PeriodicType . RECURRING . value ; secondPeriodicType . sequenceType = SequenceType . SEQUENCE . value ; PayPalPayment secondPaypalPayment = PayPalPayment ( signature , requestID , merchantID , transactionType , amount , currency , secondPeriodicType , riskReferenceId ); new Client ( this , https://api-test.wirecard.com , requestTimeout ). startPayment ( secondPaypalPayment );","title":"Recurring PayPal Payment"},{"location":"PayPal/#customizing-visuals","text":"To change colors within the SDK, override the default color values in the .xml file.","title":"Customizing Visuals"},{"location":"PayPal/#color-resources","text":"Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line","title":"Color Resources"},{"location":"PayPal/#changing-fonts","text":"To change fonts, add the font path to the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1","title":"Changing Fonts"},{"location":"PayPal/#changing-text-size","text":"To change the text size use dimensional attribute wd_ecom_text_size . This affects all the modules, except cardField .","title":"Changing Text Size"},{"location":"SEPA/","text":"SEPA Supported Transaction Types debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. pending-debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. The pending status indicates that additional processing/approval is required before the transaction is cleared. Module Implementation Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation ( com.wirecard.ecom:sepa:$wirecardEcomLibraryVersion ) { // exclude module: play-services-vision } ... } To disable the IBAN scanner feature, uncomment the exclude module line. When adding/removing this feature, perform a full clean build. If you intend to use Card Payments module together with the SEPA Direct Debit module (with IBAN scanner), you must enable/disable it in both modules. Simple SEPA Payment This is a code example for a basic SEPA payment: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 val sepaPayment = SepaPayment ( signature = signature , requestTimeStamp = timestamp , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , creditorId = null , mandateId = null , mandateSignedDate = null , merchantName = JOHN DOE , dueDate = null , periodic = null , B2B = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( sepaPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 sepaPayment = new SepaPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . setMerchantName ( JOHN DOE ) . build (); new Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( sepaPayment ); You can use Builder to create the payment object and set additional properties afterwards. Customizing Visuals To change colors within the SDK, override the default color values in the .xml file. Color Resources Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line Changing Fonts To change fonts, add the font path to the payment object: 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Changing Text Size To change the text size use dimensional attribute wd_ecom_text_size . This affects all the modules, except cardField . Customizing SEPA Payments Color Resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_main_alpha80 4 - wd_ecom_color_pay_button_text 5 - wd_ecom_color_toolbar_text 6 - wd_ecom_color_error 7 - wd_ecom_color_main_background Icons 8 - wd_ecom_arrow_back 9 - wd_ecom_cardholder_name 10 - wd_ecom_iban_3 11 - wd_ecom_camera_blue","title":"SEPA"},{"location":"SEPA/#sepa","text":"","title":"SEPA"},{"location":"SEPA/#supported-transaction-types","text":"debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. authorization - places the account holder's funds on hold, pending future capture, re-authorization or void transaction. pending-debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. The pending status indicates that additional processing/approval is required before the transaction is cleared.","title":"Supported Transaction Types"},{"location":"SEPA/#module-implementation","text":"Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation ( com.wirecard.ecom:sepa:$wirecardEcomLibraryVersion ) { // exclude module: play-services-vision } ... } To disable the IBAN scanner feature, uncomment the exclude module line. When adding/removing this feature, perform a full clean build. If you intend to use Card Payments module together with the SEPA Direct Debit module (with IBAN scanner), you must enable/disable it in both modules.","title":"Module Implementation"},{"location":"SEPA/#simple-sepa-payment","text":"This is a code example for a basic SEPA payment: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 val sepaPayment = SepaPayment ( signature = signature , requestTimeStamp = timestamp , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , creditorId = null , mandateId = null , mandateSignedDate = null , merchantName = JOHN DOE , dueDate = null , periodic = null , B2B = null ) Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( sepaPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 sepaPayment = new SepaPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . setMerchantName ( JOHN DOE ) . build (); new Client ( context , https://api-test.wirecard.com , requestTimeout ). startPayment ( sepaPayment ); You can use Builder to create the payment object and set additional properties afterwards.","title":"Simple SEPA Payment"},{"location":"SEPA/#customizing-visuals","text":"To change colors within the SDK, override the default color values in the .xml file.","title":"Customizing Visuals"},{"location":"SEPA/#color-resources","text":"Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line","title":"Color Resources"},{"location":"SEPA/#changing-fonts","text":"To change fonts, add the font path to the payment object: 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment )","title":"Changing Fonts"},{"location":"SEPA/#changing-text-size","text":"To change the text size use dimensional attribute wd_ecom_text_size . This affects all the modules, except cardField .","title":"Changing Text Size"},{"location":"SEPA/#customizing-sepa-payments","text":"Color Resources 1 - wd_ecom_color_main 2 - wd_ecom_color_light 3 - wd_ecom_color_main_alpha80 4 - wd_ecom_color_pay_button_text 5 - wd_ecom_color_toolbar_text 6 - wd_ecom_color_error 7 - wd_ecom_color_main_background Icons 8 - wd_ecom_arrow_back 9 - wd_ecom_cardholder_name 10 - wd_ecom_iban_3 11 - wd_ecom_camera_blue","title":"Customizing SEPA Payments"},{"location":"Theming/","text":"Theming For changing colors within the SDK simply override color values in xml file. Common Color Resources Changing these colors would afect all modules used within SDK. 1 2 3 4 5 6 7 wd_ecom_color_main - colour tint for icons, header and submit button gradient start colour wd_ecom_color_main_light - header and submit button gradient end colour wd_ecom_color_main_alpha80 - text input layout title colour wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text colour wd_ecom_color_main_background - background colour for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line Changing Font Simply add font path to payment object as shown in example: 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) missing JAVA code example here? Changing Text Size Use dimen(??) attribute wd_ecom_text_size for changing text size within all modules xcept card field fragment - use wd_ecom_cardfield_text_size. Theming Simple Card Payment Screenshot screenshot with a legend list here Theming Simple Animated Card Payment Screenshot screenshot with a legend list here Theming Card Field Payment Screenshot screenshot with a legend list here Theming Simple SEPA Payment Screenshot screenshot with a legend list here","title":"Theming"},{"location":"Theming/#theming","text":"For changing colors within the SDK simply override color values in xml file.","title":"Theming"},{"location":"Theming/#common-color-resources","text":"Changing these colors would afect all modules used within SDK. 1 2 3 4 5 6 7 wd_ecom_color_main - colour tint for icons, header and submit button gradient start colour wd_ecom_color_main_light - header and submit button gradient end colour wd_ecom_color_main_alpha80 - text input layout title colour wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text colour wd_ecom_color_main_background - background colour for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line","title":"Common Color Resources"},{"location":"Theming/#changing-font","text":"Simply add font path to payment object as shown in example: 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) missing JAVA code example here?","title":"Changing Font"},{"location":"Theming/#changing-text-size","text":"Use dimen(??) attribute wd_ecom_text_size for changing text size within all modules xcept card field fragment - use wd_ecom_cardfield_text_size.","title":"Changing Text Size"},{"location":"Theming/#theming-simple-card-payment-screenshot","text":"screenshot with a legend list here","title":"Theming Simple Card Payment Screenshot"},{"location":"Theming/#theming-simple-animated-card-payment-screenshot","text":"screenshot with a legend list here","title":"Theming Simple Animated Card Payment Screenshot"},{"location":"Theming/#theming-card-field-payment-screenshot","text":"screenshot with a legend list here","title":"Theming Card Field Payment Screenshot"},{"location":"Theming/#theming-simple-sepa-payment-screenshot","text":"screenshot with a legend list here","title":"Theming Simple SEPA Payment Screenshot"},{"location":"Zapp/","text":"Zapp With Zapp, there are two payments flow. Whether the customer has a banking application installed on their phone decides which one is used : 1. Banking application is installed - this app is opened after a successful response from Wirecard payment gateway. 2. No banking application - SDK prompts a pop-up informing the user to provide BRN (see explanation below) to a banking application on another device and awaits confirmation. BRN is short for Basket Reference Number, a unique temporary code provided by Zapp (and conveyed to the customer by the merchant) which identifies the order which is being paid. Supported Transaction Types debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer. Zapp transaction and delivery types Transaction types: BILLPT - Bill payment PAYMT - Retail item payment INVOICE - Invoice payment DONATIONS - Donation payment Delivery types: COLLST - Store collection. The consumer chose to collect the goods from the store personally. DELTAD - Delivery to address. The Consumer chose to have the goods delivered to the specified address. DIGDEL - Digital delivery. The Consumer chose to receive items electronically. SERVICE - Service provided. For SMB transactions where there is no need for a delivery address F2F - Face-to-face transactions. Primarily for use with an SMB transaction. NONE - No delivery Module Dependency Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation com.wirecard.ecom:zapp:$wirecardEcomLibraryVersion ... } Simple Zapp Payment Zapp requires additional setup of the wd_ecom_zapp_scheme and wd_ecom_zapp_host resources so you can receive responses from Zapp: 1 2 3 4 5 6 resources ... string name= wd_ecom_zapp_host yourapp /string string name= wd_ecom_zapp_scheme open.pbba /string ... /resources Then you can go ahead and create the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val zappPayment = ZappPayment ( signature = signature , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , zappTransactionType = PAYMT , zappDeliveryType = SERVICE , ) zappPayment . ipAddress = 127.0.0.1 Client ( context = this , url = https://api-test.wirecard.com , requestTimeout = 60 ). startPayment ( zappPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ZappPayment zappPayment = new ZappPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . setZappTransactionType ( PAYMNT ) . setZappDeliveryType ( SERVICE ) . build (); zappPayment . setIpAddress ( 127.0.0.1 ); new Client ( context , https://api-test.wirecard.com , 30 ). startPayment ( zappPayment ); Customizing Visuals To change colors within the SDK, override the default color values in the .xml file. Color Resources Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line Changing Fonts To change fonts, add the font path to the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1 Changing Text Size To change the text size use dimensional attribute wd_ecom_text_size . This affects all the modules, except cardField .","title":"Zapp"},{"location":"Zapp/#zapp","text":"With Zapp, there are two payments flow. Whether the customer has a banking application installed on their phone decides which one is used : 1. Banking application is installed - this app is opened after a successful response from Wirecard payment gateway. 2. No banking application - SDK prompts a pop-up informing the user to provide BRN (see explanation below) to a banking application on another device and awaits confirmation. BRN is short for Basket Reference Number, a unique temporary code provided by Zapp (and conveyed to the customer by the merchant) which identifies the order which is being paid.","title":"Zapp"},{"location":"Zapp/#supported-transaction-types","text":"debit - charges the specified amount from the account holder's bank account and marks it for immediate transfer.","title":"Supported Transaction Types"},{"location":"Zapp/#zapp-transaction-and-delivery-types","text":"Transaction types: BILLPT - Bill payment PAYMT - Retail item payment INVOICE - Invoice payment DONATIONS - Donation payment Delivery types: COLLST - Store collection. The consumer chose to collect the goods from the store personally. DELTAD - Delivery to address. The Consumer chose to have the goods delivered to the specified address. DIGDEL - Digital delivery. The Consumer chose to receive items electronically. SERVICE - Service provided. For SMB transactions where there is no need for a delivery address F2F - Face-to-face transactions. Primarily for use with an SMB transaction. NONE - No delivery","title":"Zapp transaction and delivery types"},{"location":"Zapp/#module-dependency","text":"Edit your build.gradle file accordingly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ext { wirecardEcomLibraryVersion = 0.0.8 } android { compileSdkVersion 27 defaultConfig { minSdkVersion 16 targetSdkVersion 27 ... } ... } repositories { mavenCentral () maven { url https://dl.bintray.com/wirecard-paymentsdk/wirecard-ecom-android } } dependencies { ... implementation com.wirecard.ecom:zapp:$wirecardEcomLibraryVersion ... }","title":"Module Dependency"},{"location":"Zapp/#simple-zapp-payment","text":"Zapp requires additional setup of the wd_ecom_zapp_scheme and wd_ecom_zapp_host resources so you can receive responses from Zapp: 1 2 3 4 5 6 resources ... string name= wd_ecom_zapp_host yourapp /string string name= wd_ecom_zapp_scheme open.pbba /string ... /resources Then you can go ahead and create the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val zappPayment = ZappPayment ( signature = signature , requestID = requestID , merchantAccountId = merchantID , transactionType = transactionType , amount = amount , currency = currency , zappTransactionType = PAYMT , zappDeliveryType = SERVICE , ) zappPayment . ipAddress = 127.0.0.1 Client ( context = this , url = https://api-test.wirecard.com , requestTimeout = 60 ). startPayment ( zappPayment ) Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ZappPayment zappPayment = new ZappPayment . Builder () . setSignature ( signature ) . setRequestId ( requestID ) . setMerchantAccountId ( merchantID ) . setTransactionType ( transactionType ) . setAmount ( amount ) . setCurrency ( currency ) . setZappTransactionType ( PAYMNT ) . setZappDeliveryType ( SERVICE ) . build (); zappPayment . setIpAddress ( 127.0.0.1 ); new Client ( context , https://api-test.wirecard.com , 30 ). startPayment ( zappPayment );","title":"Simple Zapp Payment"},{"location":"Zapp/#customizing-visuals","text":"To change colors within the SDK, override the default color values in the .xml file.","title":"Customizing Visuals"},{"location":"Zapp/#color-resources","text":"Changing any of these will affect every module used in the SDK: wd_ecom_color_main - color tint for icons, header and submit button gradient start color wd_ecom_color_main_light - header and submit button gradient end color wd_ecom_color_main_alpha80 - text input layout title color wd_ecom_color_toolbar_text - toolbar text and back arrow tint wd_ecom_color_pay_button_text - pay button text color wd_ecom_color_main_background - background color for main view wd_ecom_color_error - used for all text input layouts to modify error text color including the edit text line","title":"Color Resources"},{"location":"Zapp/#changing-fonts","text":"To change fonts, add the font path to the payment object: Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 val cardPayment = CardPayment ( signature , timestamp , requestID , merchantID , transactionType , amount , currency ) cardPayment . fontPath = fonts/myFont.otf Client ( context = this , url = https://api-test.wirecard.com , requestTimeout ). startPayment ( cardPayment ) Java 1","title":"Changing Fonts"},{"location":"Zapp/#changing-text-size","text":"To change the text size use dimensional attribute wd_ecom_text_size . This affects all the modules, except cardField .","title":"Changing Text Size"}]}